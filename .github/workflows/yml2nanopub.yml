name: Publish Vocabulary from LinkML to Nanopub

on:
  workflow_call:
    inputs:
      ref:
        description: 'Git reference (branch, tag, or commit SHA) to checkout'
        required: true
        type: string
      version:
        description: 'Version of the vocabulary being published'
        required: false
        type: string
        default: ''
      linkml_schema:
        description: 'Path to the LinkML schema file'
        required: true
        type: string
      data:
        description: 'Path to the data file containing entities to publish. Either data or artefact_name should be specified.'
        required: false
        type: string
      input_artefact_name:
        description: 'Name of the artefact that serves as input to workflow. Replaces data.'
        required: false
        type: string
      changelog:
        description: 'Path to the changelog file containing all terms to be published'
        required: true
        type: string
      target_name:
        description: 'Name of the target entity list in the data file'
        required: true
        type: string
      dry_run:
        description: 'If true, signs nanopubs but does not publish them'
        type: boolean
        default: false
      output_htaccess:
        description: 'output path for htaccess file'
        type: string
        required: false
        default: 'htaccess.txt'
      output_artefact_name:
        description: 'Name of the artefact that containing the .htaccess file that is generated.'
        required: false
        type: string
        default: 'htaccess.txt'
      preflabel:
        description: 'name of field used to create identifier using hash function. Default is label'
        required: false
        type: string
      id_key:
        description: 'name of field containing URI. Default is id.'
        required: false
        type: string
      type_prefix:
        description: 'Default part that is added to identifier following namespace.'
        required: true
        type: string
      
    secrets:
      token:
        description: 'GitHub token for repository checkout'
        required: true
      NANOPUB_ORCID_ID:
        description: 'ORCID ID for nanopub profile'
        required: true
      NANOPUB_NAME:
        description: 'Name for nanopub profile'
        required: true
      NANOPUB_PRIVATE_KEY:
        description: 'Private key for nanopub profile'
        required: true
      NANOPUB_PUBLIC_KEY:
        description: 'Public key for nanopub profile'
        required: true
      NANOPUB_INTRO_URI:
        description: 'Introduction nanopub URI'
        required: true
          
jobs:
  publish-nanopubs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0
        with:
          access_token: ${{ github.token }}
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          token: ${{ secrets.token }}
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install linkml nanopub click rdflib pyyaml

      - name: Check if script exists in current branch
        id: check-script
        run: |
          if [ -f "./rules/publish_nanopubs.py" ]; then
            echo "SCRIPT_PATH=./rules/publish_nanopubs.py" >> $GITHUB_OUTPUT
            echo "Script found in repository"
          else
            echo "SCRIPT_PATH=./publish_nanopubs.py" >> $GITHUB_OUTPUT
            echo "Script not found in repository, will download"
          fi

      - name: Cache downloaded script
        id: cache-script
        if: steps.check-script.outputs.SCRIPT_PATH == './publish_nanopubs.py'
        uses: actions/cache@v3
        with:
          path: ./publish_nanopubs.py
          key: nanopub-script-${{ hashFiles('**/workflow.yml') }}
        

      - name: Download publish_nanopubs.py
        if: steps.check-script.outputs.SCRIPT_PATH == './publish_nanopubs.py' && steps.cache-script.outputs.cache-hit != 'true'
        run: |
          curl -s -o publish_nanopubs.py https://raw.githubusercontent.com/eu-parc/voc2nanopub/main/rules/publish_nanopubs.py
          chmod +x publish_nanopubs.py

      - name: Process schema (download or copy)
        run: |
          if [[ "${{ inputs.linkml_schema }}" == http* ]]; then
            # If it's a URL, download the schema
            echo "Schema is a URL. Downloading..."
            curl -L "${{ inputs.linkml_schema }}" -o ./schema.linkml.yml
          else
            # If it's a file path, copy the schema
            echo "Schema is a file path. Copying..."
            cp "${{ inputs.linkml_schema }}" ./schema.linkml.yml
          fi
      
      - name: Validate inputs
        run: |
          if [ ! -f "schema.linkml.yml" ]; then
            echo "ERROR: LinkML schema file not found at schema.linkml.yml"
            exit 1
          fi
          
          if [ ! -f "${{ inputs.data }}" ]; then
            echo "ERROR: Data file not found at ${{ inputs.data }}"
            exit 1
          fi

      - name: Set data file path
        id: data-path
        run: |
          if [ -n "${{ inputs.input_artefact_name }}" ]; then
            echo "Downloading artifact: ${{ inputs.input_artefact_name }}"
            echo "data_file=./downloaded-artifacts/${{ inputs.input_artefact_name }}" >> $GITHUB_OUTPUT
          else
            echo "Using file from repo: ${{ inputs.data }}"
            echo "data_file=${{ inputs.data }}" >> $GITHUB_OUTPUT
          fi

      - name: Download artifact if needed
        if: inputs.input_artefact_name != ''
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.input_artefact_name }}
          path: ./downloaded-artifacts

      - name: Set dry run flag
        id: set-dry-run
        run: |
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "DRY_RUN_FLAG=--dry-run" >> $GITHUB_OUTPUT
          else
            echo "DRY_RUN_FLAG=" >> $GITHUB_OUTPUT
          fi

      - name: Publish Nanopubs
        id: publish
        continue-on-error: true
        run: |
          python3 ${{ steps.check-script.outputs.SCRIPT_PATH }} \
            --schema ./schema.linkml.yml \
            --data ${{ steps.data-path.outputs.data_file }} \
            --changelog "${{ inputs.changelog }}" \
            --target "${{ inputs.target_name }}" \
            ${{ steps.set-dry-run.outputs.DRY_RUN_FLAG }} \
            --output-pairs "${{ inputs.output_htaccess }}" \
            --preflabel "${{ inputs.preflabel }}" \
            --type-prefix "${{ inputs.type_prefix }}" \
            --verbose
        env:
          NANOPUB_ORCID_ID: ${{ secrets.NANOPUB_ORCID_ID }}
          NANOPUB_NAME: ${{ secrets.NANOPUB_NAME }}
          NANOPUB_PRIVATE_KEY: ${{ secrets.NANOPUB_PRIVATE_KEY }}
          NANOPUB_PUBLIC_KEY: ${{ secrets.NANOPUB_PUBLIC_KEY }}
          NANOPUB_INTRO_URI: ${{ secrets.NANOPUB_INTRO_URI }}
          VERSION: ${{ inputs.version }}
      
      - name: Check for errors
        if: steps.publish.outcome != 'success'
        run: |
          echo "::error::Nanopub publishing failed"
          exit 1
    
      - name: Upload vocabulary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.output_artefact_name }}
          path: ./${{ inputs.output_htaccess }}
